// ignore_for_file: camel_case_types, non_constant_identifier_names
// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to KissFFT
class KissFftFfi {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  KissFftFfi(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  KissFftFfi.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<kiss_fft_state> kiss_fft_alloc(
    int nfft,
    int inverse_fft,
    ffi.Pointer<ffi.Void> mem,
    ffi.Pointer<ffi.Uint64> lenmem,
  ) {
    return _kiss_fft_alloc(
      nfft,
      inverse_fft,
      mem,
      lenmem,
    );
  }

  late final _kiss_fft_alloc_ptr =
      _lookup<ffi.NativeFunction<_c_kiss_fft_alloc>>('kiss_fft_alloc');
  late final _dart_kiss_fft_alloc _kiss_fft_alloc =
      _kiss_fft_alloc_ptr.asFunction<_dart_kiss_fft_alloc>();

  void kiss_fft(
    ffi.Pointer<kiss_fft_state> cfg,
    ffi.Pointer<kiss_fft_cpx> fin,
    ffi.Pointer<kiss_fft_cpx> fout,
  ) {
    return _kiss_fft(
      cfg,
      fin,
      fout,
    );
  }

  late final _kiss_fft_ptr =
      _lookup<ffi.NativeFunction<_c_kiss_fft>>('kiss_fft');
  late final _dart_kiss_fft _kiss_fft =
      _kiss_fft_ptr.asFunction<_dart_kiss_fft>();

  void kiss_fft_stride(
    ffi.Pointer<kiss_fft_state> cfg,
    ffi.Pointer<kiss_fft_cpx> fin,
    ffi.Pointer<kiss_fft_cpx> fout,
    int fin_stride,
  ) {
    return _kiss_fft_stride(
      cfg,
      fin,
      fout,
      fin_stride,
    );
  }

  late final _kiss_fft_stride_ptr =
      _lookup<ffi.NativeFunction<_c_kiss_fft_stride>>('kiss_fft_stride');
  late final _dart_kiss_fft_stride _kiss_fft_stride =
      _kiss_fft_stride_ptr.asFunction<_dart_kiss_fft_stride>();

  void kiss_fft_cleanup() {
    return _kiss_fft_cleanup();
  }

  late final _kiss_fft_cleanup_ptr =
      _lookup<ffi.NativeFunction<_c_kiss_fft_cleanup>>('kiss_fft_cleanup');
  late final _dart_kiss_fft_cleanup _kiss_fft_cleanup =
      _kiss_fft_cleanup_ptr.asFunction<_dart_kiss_fft_cleanup>();

  int kiss_fft_next_fast_size(
    int n,
  ) {
    return _kiss_fft_next_fast_size(
      n,
    );
  }

  late final _kiss_fft_next_fast_size_ptr =
      _lookup<ffi.NativeFunction<_c_kiss_fft_next_fast_size>>(
          'kiss_fft_next_fast_size');
  late final _dart_kiss_fft_next_fast_size _kiss_fft_next_fast_size =
      _kiss_fft_next_fast_size_ptr.asFunction<_dart_kiss_fft_next_fast_size>();

  ffi.Pointer<kiss_fftnd_state> kiss_fftnd_alloc(
    ffi.Pointer<ffi.Int32> dims,
    int ndims,
    int inverse_fft,
    ffi.Pointer<ffi.Void> mem,
    ffi.Pointer<ffi.Uint64> lenmem,
  ) {
    return _kiss_fftnd_alloc(
      dims,
      ndims,
      inverse_fft,
      mem,
      lenmem,
    );
  }

  late final _kiss_fftnd_alloc_ptr =
      _lookup<ffi.NativeFunction<_c_kiss_fftnd_alloc>>('kiss_fftnd_alloc');
  late final _dart_kiss_fftnd_alloc _kiss_fftnd_alloc =
      _kiss_fftnd_alloc_ptr.asFunction<_dart_kiss_fftnd_alloc>();

  void kiss_fftnd(
    ffi.Pointer<kiss_fftnd_state> cfg,
    ffi.Pointer<kiss_fft_cpx> fin,
    ffi.Pointer<kiss_fft_cpx> fout,
  ) {
    return _kiss_fftnd(
      cfg,
      fin,
      fout,
    );
  }

  late final _kiss_fftnd_ptr =
      _lookup<ffi.NativeFunction<_c_kiss_fftnd>>('kiss_fftnd');
  late final _dart_kiss_fftnd _kiss_fftnd =
      _kiss_fftnd_ptr.asFunction<_dart_kiss_fftnd>();

  ffi.Pointer<kiss_fftr_state> kiss_fftr_alloc(
    int nfft,
    int inverse_fft,
    ffi.Pointer<ffi.Void> mem,
    ffi.Pointer<ffi.Uint64> lenmem,
  ) {
    return _kiss_fftr_alloc(
      nfft,
      inverse_fft,
      mem,
      lenmem,
    );
  }

  late final _kiss_fftr_alloc_ptr =
      _lookup<ffi.NativeFunction<_c_kiss_fftr_alloc>>('kiss_fftr_alloc');
  late final _dart_kiss_fftr_alloc _kiss_fftr_alloc =
      _kiss_fftr_alloc_ptr.asFunction<_dart_kiss_fftr_alloc>();

  void kiss_fftr(
    ffi.Pointer<kiss_fftr_state> cfg,
    ffi.Pointer<ffi.Float> timedata,
    ffi.Pointer<kiss_fft_cpx> freqdata,
  ) {
    return _kiss_fftr(
      cfg,
      timedata,
      freqdata,
    );
  }

  late final _kiss_fftr_ptr =
      _lookup<ffi.NativeFunction<_c_kiss_fftr>>('kiss_fftr');
  late final _dart_kiss_fftr _kiss_fftr =
      _kiss_fftr_ptr.asFunction<_dart_kiss_fftr>();

  void kiss_fftri(
    ffi.Pointer<kiss_fftr_state> cfg,
    ffi.Pointer<kiss_fft_cpx> freqdata,
    ffi.Pointer<ffi.Float> timedata,
  ) {
    return _kiss_fftri(
      cfg,
      freqdata,
      timedata,
    );
  }

  late final _kiss_fftri_ptr =
      _lookup<ffi.NativeFunction<_c_kiss_fftri>>('kiss_fftri');
  late final _dart_kiss_fftri _kiss_fftri =
      _kiss_fftri_ptr.asFunction<_dart_kiss_fftri>();

  ffi.Pointer<kiss_fftndr_state> kiss_fftndr_alloc(
    ffi.Pointer<ffi.Int32> dims,
    int ndims,
    int inverse_fft,
    ffi.Pointer<ffi.Void> mem,
    ffi.Pointer<ffi.Uint64> lenmem,
  ) {
    return _kiss_fftndr_alloc(
      dims,
      ndims,
      inverse_fft,
      mem,
      lenmem,
    );
  }

  late final _kiss_fftndr_alloc_ptr =
      _lookup<ffi.NativeFunction<_c_kiss_fftndr_alloc>>('kiss_fftndr_alloc');
  late final _dart_kiss_fftndr_alloc _kiss_fftndr_alloc =
      _kiss_fftndr_alloc_ptr.asFunction<_dart_kiss_fftndr_alloc>();

  void kiss_fftndr(
    ffi.Pointer<kiss_fftndr_state> cfg,
    ffi.Pointer<ffi.Float> timedata,
    ffi.Pointer<kiss_fft_cpx> freqdata,
  ) {
    return _kiss_fftndr(
      cfg,
      timedata,
      freqdata,
    );
  }

  late final _kiss_fftndr_ptr =
      _lookup<ffi.NativeFunction<_c_kiss_fftndr>>('kiss_fftndr');
  late final _dart_kiss_fftndr _kiss_fftndr =
      _kiss_fftndr_ptr.asFunction<_dart_kiss_fftndr>();

  void kiss_fftndri(
    ffi.Pointer<kiss_fftndr_state> cfg,
    ffi.Pointer<kiss_fft_cpx> freqdata,
    ffi.Pointer<ffi.Float> timedata,
  ) {
    return _kiss_fftndri(
      cfg,
      freqdata,
      timedata,
    );
  }

  late final _kiss_fftndri_ptr =
      _lookup<ffi.NativeFunction<_c_kiss_fftndri>>('kiss_fftndri');
  late final _dart_kiss_fftndri _kiss_fftndri =
      _kiss_fftndri_ptr.asFunction<_dart_kiss_fftndri>();
}

class kiss_fft_cpx extends ffi.Struct {
  @ffi.Float()
  external double r;

  @ffi.Float()
  external double i;
}

class kiss_fft_state extends ffi.Opaque {}

class kiss_fftnd_state extends ffi.Opaque {}

class kiss_fftr_state extends ffi.Opaque {}

class kiss_fftndr_state extends ffi.Opaque {}

typedef _c_kiss_fft_alloc = ffi.Pointer<kiss_fft_state> Function(
  ffi.Int32 nfft,
  ffi.Int32 inverse_fft,
  ffi.Pointer<ffi.Void> mem,
  ffi.Pointer<ffi.Uint64> lenmem,
);

typedef _dart_kiss_fft_alloc = ffi.Pointer<kiss_fft_state> Function(
  int nfft,
  int inverse_fft,
  ffi.Pointer<ffi.Void> mem,
  ffi.Pointer<ffi.Uint64> lenmem,
);

typedef _c_kiss_fft = ffi.Void Function(
  ffi.Pointer<kiss_fft_state> cfg,
  ffi.Pointer<kiss_fft_cpx> fin,
  ffi.Pointer<kiss_fft_cpx> fout,
);

typedef _dart_kiss_fft = void Function(
  ffi.Pointer<kiss_fft_state> cfg,
  ffi.Pointer<kiss_fft_cpx> fin,
  ffi.Pointer<kiss_fft_cpx> fout,
);

typedef _c_kiss_fft_stride = ffi.Void Function(
  ffi.Pointer<kiss_fft_state> cfg,
  ffi.Pointer<kiss_fft_cpx> fin,
  ffi.Pointer<kiss_fft_cpx> fout,
  ffi.Int32 fin_stride,
);

typedef _dart_kiss_fft_stride = void Function(
  ffi.Pointer<kiss_fft_state> cfg,
  ffi.Pointer<kiss_fft_cpx> fin,
  ffi.Pointer<kiss_fft_cpx> fout,
  int fin_stride,
);

typedef _c_kiss_fft_cleanup = ffi.Void Function();

typedef _dart_kiss_fft_cleanup = void Function();

typedef _c_kiss_fft_next_fast_size = ffi.Int32 Function(
  ffi.Int32 n,
);

typedef _dart_kiss_fft_next_fast_size = int Function(
  int n,
);

typedef _c_kiss_fftnd_alloc = ffi.Pointer<kiss_fftnd_state> Function(
  ffi.Pointer<ffi.Int32> dims,
  ffi.Int32 ndims,
  ffi.Int32 inverse_fft,
  ffi.Pointer<ffi.Void> mem,
  ffi.Pointer<ffi.Uint64> lenmem,
);

typedef _dart_kiss_fftnd_alloc = ffi.Pointer<kiss_fftnd_state> Function(
  ffi.Pointer<ffi.Int32> dims,
  int ndims,
  int inverse_fft,
  ffi.Pointer<ffi.Void> mem,
  ffi.Pointer<ffi.Uint64> lenmem,
);

typedef _c_kiss_fftnd = ffi.Void Function(
  ffi.Pointer<kiss_fftnd_state> cfg,
  ffi.Pointer<kiss_fft_cpx> fin,
  ffi.Pointer<kiss_fft_cpx> fout,
);

typedef _dart_kiss_fftnd = void Function(
  ffi.Pointer<kiss_fftnd_state> cfg,
  ffi.Pointer<kiss_fft_cpx> fin,
  ffi.Pointer<kiss_fft_cpx> fout,
);

typedef _c_kiss_fftr_alloc = ffi.Pointer<kiss_fftr_state> Function(
  ffi.Int32 nfft,
  ffi.Int32 inverse_fft,
  ffi.Pointer<ffi.Void> mem,
  ffi.Pointer<ffi.Uint64> lenmem,
);

typedef _dart_kiss_fftr_alloc = ffi.Pointer<kiss_fftr_state> Function(
  int nfft,
  int inverse_fft,
  ffi.Pointer<ffi.Void> mem,
  ffi.Pointer<ffi.Uint64> lenmem,
);

typedef _c_kiss_fftr = ffi.Void Function(
  ffi.Pointer<kiss_fftr_state> cfg,
  ffi.Pointer<ffi.Float> timedata,
  ffi.Pointer<kiss_fft_cpx> freqdata,
);

typedef _dart_kiss_fftr = void Function(
  ffi.Pointer<kiss_fftr_state> cfg,
  ffi.Pointer<ffi.Float> timedata,
  ffi.Pointer<kiss_fft_cpx> freqdata,
);

typedef _c_kiss_fftri = ffi.Void Function(
  ffi.Pointer<kiss_fftr_state> cfg,
  ffi.Pointer<kiss_fft_cpx> freqdata,
  ffi.Pointer<ffi.Float> timedata,
);

typedef _dart_kiss_fftri = void Function(
  ffi.Pointer<kiss_fftr_state> cfg,
  ffi.Pointer<kiss_fft_cpx> freqdata,
  ffi.Pointer<ffi.Float> timedata,
);

typedef _c_kiss_fftndr_alloc = ffi.Pointer<kiss_fftndr_state> Function(
  ffi.Pointer<ffi.Int32> dims,
  ffi.Int32 ndims,
  ffi.Int32 inverse_fft,
  ffi.Pointer<ffi.Void> mem,
  ffi.Pointer<ffi.Uint64> lenmem,
);

typedef _dart_kiss_fftndr_alloc = ffi.Pointer<kiss_fftndr_state> Function(
  ffi.Pointer<ffi.Int32> dims,
  int ndims,
  int inverse_fft,
  ffi.Pointer<ffi.Void> mem,
  ffi.Pointer<ffi.Uint64> lenmem,
);

typedef _c_kiss_fftndr = ffi.Void Function(
  ffi.Pointer<kiss_fftndr_state> cfg,
  ffi.Pointer<ffi.Float> timedata,
  ffi.Pointer<kiss_fft_cpx> freqdata,
);

typedef _dart_kiss_fftndr = void Function(
  ffi.Pointer<kiss_fftndr_state> cfg,
  ffi.Pointer<ffi.Float> timedata,
  ffi.Pointer<kiss_fft_cpx> freqdata,
);

typedef _c_kiss_fftndri = ffi.Void Function(
  ffi.Pointer<kiss_fftndr_state> cfg,
  ffi.Pointer<kiss_fft_cpx> freqdata,
  ffi.Pointer<ffi.Float> timedata,
);

typedef _dart_kiss_fftndri = void Function(
  ffi.Pointer<kiss_fftndr_state> cfg,
  ffi.Pointer<kiss_fft_cpx> freqdata,
  ffi.Pointer<ffi.Float> timedata,
);
